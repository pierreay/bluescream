#+TITLE: Screaming Channels on Bluetooth Low Energy -- ACSAC Artifact Evaluation
#+SETUPFILE: https://raw.githubusercontent.com/pierreay/orgcss/master/orgcss.setup

* Introduction

This guide will help you reproduce the main results of our paper.

To fully reproduce this attack, one would have to first acquire a dataset by:
1. Flashing two firmware (the attacker dongle and the victim board) and
   installing the radio tooling.
2. Setup the experimental setup, including the attacker host computer, the
   radio, the antenna and amplifiers, the dongle, the victim dongle.
3. Performing a dataset collection (up to several days).
4. Post-processing the dataset to extract the small AES leak amplitude trace
   from the large RAW I/Q signal.

As you imagine, this is fairly complex and long without prior experience.
Hence, in this guide, we provides two already-processed datasets on which we
can complete the second part of the attack:
- $A_{7}$ :: =240207_1-leak-pairing-10cm-anechoic-2.533e9-8e6_raw=
- $A_{9}$ :: =240429_highdist_2lna_highgain_norep= (the $A2$ attack)

For both datasets, we will execute the following steps:
1. Create a profile / template from a training subset to learn the leakage
   model.
2. Leveraging the profile, attack using a Template Attack on an attack subset.

* Setup

First, we will setup necessary tools, downloading the code and the data.

** Download

Clone the "Screaming Channels on Bluetooth Low Energy" repository (~ 10 MB) in
the directory of your choice:

#+begin_src bash :eval never
git clone https://github.com/pierreay/screaming_channels_ble/
#+end_src

** Installation

We will setup a temporary Docker container for reproducing the attacks. The
image and containers will be cleaned up at the end, no files will be left or
modified on the host system.

Download and initialize the Docker image from the directory containing the
=Dockerfile=:

#+begin_src bash :eval never
cd screaming_channels_ble/docs/demo_20240828_acsac && make build
#+end_src

The Docker is ready to be use.

* Reproducing the attacks

In the following, we assume that the reader is connected to the Docker
container through SSH:

#+begin_src bash
XXX
#+end_src

The =$SC_SRC= variable is set to the path of the =screaming_channels_ble/src=
directory, while the =$DATASET= variable will be set to the path of the
currently analyzed dataset.

** $A_{7}$

** $A_{9}$

Set the path to the dataset:

#+begin_src bash :eval never
export DATASET="${HOME}/git/screaming_channels_data/datasets/ble/240429_highdist_2lna_highgain_norep/raw"
#+end_src

Create the profile:

#+begin_src bash :eval never
"${SC_SRC}/attack.py" --dataset-path "${DATASET}" --custom-dtype --plot --no-save-images --norm --comptype AMPLITUDE \
                      --num-traces 65000 --start-point 1100 --end-point 1650 \
                      profile --pois-algo r --num-pois 1 --poi-spacing 1 --variable p_xor_k --align
#+end_src

Set the path to the created profile:

#+begin_src bash :eval never
export PROFILE=""
#+end_src

Attack using the created profile:

#+begin_src bash :eval never
"${SC_SRC}"/attack.py --dataset-path "${DATASET}" --custom-dtype --log --plot --norm --no-bruteforce --comptype AMPLITUDE \
           --start-point 1020 --end-point 1570 --num-traces 40000 \
           attack --attack-algo pcc --profile "${PROFILE}" --num-pois 1 --poi-spacing 1 --variable p_xor_k --align-attack --align-profile --no-align-profile-avg
#+end_src

* Clean

Once the Docker container is exited, one may run the following to clean the
=ubuntu:22.04= image:

#+begin_src bash :eval never
make clean
#+end_src
