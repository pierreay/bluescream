#+TITLE: Screaming Channels on Bluetooth Low Energy -- ACSAC Artifact Evaluation
#+SETUPFILE: https://raw.githubusercontent.com/pierreay/orgcss/master/orgcss.setup

* Introduction

This guide will help you reproduce the main results of our paper. A web version
can found at the following URL:
https://github.com/pierreay/screaming_channels_ble/tree/main/docs/demo_20240828_acsac/README.org

To fully reproduce this attack, one would have to first acquire a dataset by:
1. Flashing two firmware (the attacker dongle and the victim board) and
   installing the radio tooling.
2. Setup the experimental setup, including the attacker host computer, the
   radio, the antenna and amplifiers, the dongle, the victim dongle.
3. Performing a dataset collection (up to several days).
4. Post-processing the dataset to extract the small AES leak amplitude trace
   from the large RAW I/Q signal.

As you imagine, this is fairly complex and long without prior experience.
Hence, in this guide, we provides two already-processed datasets on which we
can complete the second part of the attack:
- $A_{7}$ :: =240207_1-leak-pairing-10cm-anechoic-2.533e9-8e6_raw=
- $A_{9}$ :: =240429_highdist_2lna_highgain_norep= (the $A2$ attack)

# TODO: Add Zenodo submission.

For both datasets, we will execute the following steps:
1. Create a profile / template from a training subset to learn the leakage
   model.
2. Leveraging the profile, attack using a Template Attack on an attack subset.

* Setup

First, we will setup necessary tools, downloading the code and the data.

** Download

Clone the "Screaming Channels on Bluetooth Low Energy" repository (~ 10 MB) in
the directory of your choice:

#+begin_src bash :eval never
git clone https://github.com/pierreay/screaming_channels_ble/
#+end_src

Moreover, manually download the two aforementioned datasets which have been
publicly uploaded on Zenodo, by following [[https://zenodo.org/records/13384278][this link]] (less than 2 GB).

** Installation

We will setup a temporary Docker container for reproducing the attacks. Ensure
that both [[https://www.docker.com/][Docker]] and its [[https://docs.docker.com/build/concepts/overview/][buildx]] components are installed.

First, move the downloaded datasets inside the Docker folder:

#+begin_src bash :eval never
cd screaming_channels_ble/docs/demo_20240828_acsac
mv -t . /PATH/TO/240207_1-leak-pairing-10cm-anechoic-2.533e9-8e6_raw.tar.bz2
mv -t . /PATH/TO/240429_highdist_2lna_highgain_norep.tar.bz2
#+end_src

Second, download and initialize the Docker image leveraging the =Dockerfile=:

#+begin_src bash :eval never
make build
#+end_src

It will download around 2 GB and decompress the datasets that have downloaded
previously inside the container. The image and containers will be cleaned up at
the end, no files will be left or modified on the host system.

If you get an error like the following one:

#+begin_example
cp: cannot stat '/host/*.tar.bz2': No such file or directory
#+end_example

It means that the two datasets archives were not moved correctly to the
Dockerfile directory and that the Docker container cannot access them.

* Reproducing the attacks

The Docker is now ready to be use. In the following, we assume that the reader
is connected to the Docker container through SSH:

#+begin_src bash
make shell
#+end_src

For the following command, the =$SC_SRC= variable is set to the path of the
=screaming_channels_ble/src= directory, while the =$DATASET= variable will be
set to the path of the currently analyzed dataset.

** $A_{7}$

** $A_{9}$

Set the path to the dataset:

#+begin_src bash :eval never
export DATASET="/240429_highdist_2lna_highgain_norep/raw"
#+end_src

Create the profile, where the options means:
- --custom-dtype :: Use a custom =dtype= instead of the default Numpy complex
  =dtype=, allowing to save disk space.
- --norm :: Normalize the traces after loading.
- --start-point / --end-point :: Truncate the traces between those points.
- --pois-algo :: Use the XXX test to find informative point of interests (PoIs).
- --num-pois :: Use only 1 PoI per subbytes.
- --variable p_xor_k :: Use the $l = p \oplus k$ leakage variable, with $p$ the
  plaintext and $k$ the key.

#+begin_src bash :eval never
"${SC_SRC}/attack.py" --dataset-path "${DATASET}" --custom-dtype --plot --save-images --norm --comptype AMPLITUDE \
                      --num-traces 65000 --start-point 1100 --end-point 1650 \
                      profile --pois-algo r --num-pois 1 --poi-spacing 1 --variable p_xor_k --align
#+end_src

At the point, a plot should open (if X11 forwarding is correctly configured
with Docker) and the profile will be stored under =${DATASET}/profile=. If no
plot appears, check that the profile has correctly been created by running:

#+begin_src bash :eval never
evince ${DATASET}/profile/*.pdf
#+end_src

You should obtains plots similar to
[[file:gfx/240429_highdist_2lna_highgain_norep-pois.png][gfx/240429_highdist_2lna_highgain_norep-pois.png]] and
[[file:gfx/240429_highdist_2lna_highgain_norep-profile-pois-0.png][gfx/240429_highdist_2lna_highgain_norep-profile-pois-0.png]].

Set the path to the created profile:

#+begin_src bash :eval never
export PROFILE=""
#+end_src

Attack using the created profile:

#+begin_src bash :eval never
"${SC_SRC}"/attack.py --dataset-path "${DATASET}" --custom-dtype --log --plot --norm --no-bruteforce --comptype AMPLITUDE \
           --start-point 1020 --end-point 1570 --num-traces 40000 \
           attack --attack-algo pcc --profile "${PROFILE}" --num-pois 1 --poi-spacing 1 --variable p_xor_k --align-attack --align-profile --no-align-profile-avg
#+end_src

* Clean

Once the Docker container is exited, one may run the following to clean the
image:

#+begin_src bash :eval never
make clean
#+end_src
